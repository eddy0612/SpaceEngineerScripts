// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "RLCA +             .tt" instead.

using System;

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The RLC A instruction
            /// </summary>
            byte RLC_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC B instruction
            /// </summary>
            byte RLC_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC C instruction
            /// </summary>
            byte RLC_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC D instruction
            /// </summary>
            byte RLC_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC E instruction
            /// </summary>
            byte RLC_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC H instruction
            /// </summary>
            byte RLC_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC L instruction
            /// </summary>
            byte RLC_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RLC (HL) instruction
            /// </summary>
            byte RLC_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The RLCA instruction
            /// </summary>
            byte RLCA()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                return 4;
            }

            /// <summary>
            /// The RLC (IX+n),A instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n),B instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n),C instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n),D instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n),E instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n),H instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n),L instruction
            /// </summary>
            byte RLC_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IX+n) instruction
            /// </summary>
            byte RLC_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),A instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),B instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),C instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),D instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),E instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),H instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n),L instruction
            /// </summary>
            byte RLC_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RLC (IY+n) instruction
            /// </summary>
            byte RLC_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (oldValue >> 7));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC A instruction
            /// </summary>
            byte RRC_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC B instruction
            /// </summary>
            byte RRC_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC C instruction
            /// </summary>
            byte RRC_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC D instruction
            /// </summary>
            byte RRC_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC E instruction
            /// </summary>
            byte RRC_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC H instruction
            /// </summary>
            byte RRC_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC L instruction
            /// </summary>
            byte RRC_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RRC (HL) instruction
            /// </summary>
            byte RRC_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The RRCA instruction
            /// </summary>
            byte RRCA()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                return 4;
            }

            /// <summary>
            /// The RRC (IX+n),A instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n),B instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n),C instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n),D instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n),E instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n),H instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n),L instruction
            /// </summary>
            byte RRC_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IX+n) instruction
            /// </summary>
            byte RRC_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),A instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),B instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),C instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),D instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),E instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),H instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n),L instruction
            /// </summary>
            byte RRC_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RRC (IY+n) instruction
            /// </summary>
            byte RRC_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue << 7));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL A instruction
            /// </summary>
            byte RL_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL B instruction
            /// </summary>
            byte RL_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL C instruction
            /// </summary>
            byte RL_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL D instruction
            /// </summary>
            byte RL_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL E instruction
            /// </summary>
            byte RL_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL H instruction
            /// </summary>
            byte RL_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL L instruction
            /// </summary>
            byte RL_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RL (HL) instruction
            /// </summary>
            byte RL_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The RLA instruction
            /// </summary>
            byte RLA()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                return 4;
            }

            /// <summary>
            /// The RL (IX+n),A instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n),B instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n),C instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n),D instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n),E instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n),H instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n),L instruction
            /// </summary>
            byte RL_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IX+n) instruction
            /// </summary>
            byte RL_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),A instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),B instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),C instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),D instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),E instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),H instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n),L instruction
            /// </summary>
            byte RL_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RL (IY+n) instruction
            /// </summary>
            byte RL_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | (byte)RG.CF);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR A instruction
            /// </summary>
            byte RR_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR B instruction
            /// </summary>
            byte RR_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR C instruction
            /// </summary>
            byte RR_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR D instruction
            /// </summary>
            byte RR_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR E instruction
            /// </summary>
            byte RR_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR H instruction
            /// </summary>
            byte RR_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR L instruction
            /// </summary>
            byte RR_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The RR (HL) instruction
            /// </summary>
            byte RR_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The RRA instruction
            /// </summary>
            byte RRA()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                return 4;
            }

            /// <summary>
            /// The RR (IX+n),A instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n),B instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n),C instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n),D instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n),E instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n),H instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n),L instruction
            /// </summary>
            byte RR_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IX+n) instruction
            /// </summary>
            byte RR_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),A instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),B instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),C instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),D instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),E instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),H instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n),L instruction
            /// </summary>
            byte RR_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The RR (IY+n) instruction
            /// </summary>
            byte RR_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (RG.CF ? 0x80 : 0));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA A instruction
            /// </summary>
            byte SLA_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)(oldValue << 1);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA B instruction
            /// </summary>
            byte SLA_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)(oldValue << 1);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA C instruction
            /// </summary>
            byte SLA_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)(oldValue << 1);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA D instruction
            /// </summary>
            byte SLA_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)(oldValue << 1);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA E instruction
            /// </summary>
            byte SLA_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)(oldValue << 1);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA H instruction
            /// </summary>
            byte SLA_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)(oldValue << 1);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA L instruction
            /// </summary>
            byte SLA_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)(oldValue << 1);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLA (HL) instruction
            /// </summary>
            byte SLA_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The SLA (IX+n),A instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n),B instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n),C instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n),D instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n),E instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n),H instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n),L instruction
            /// </summary>
            byte SLA_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IX+n) instruction
            /// </summary>
            byte SLA_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),A instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),B instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),C instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),D instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),E instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),H instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n),L instruction
            /// </summary>
            byte SLA_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLA (IY+n) instruction
            /// </summary>
            byte SLA_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue << 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA A instruction
            /// </summary>
            byte SRA_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA B instruction
            /// </summary>
            byte SRA_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA C instruction
            /// </summary>
            byte SRA_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA D instruction
            /// </summary>
            byte SRA_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA E instruction
            /// </summary>
            byte SRA_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA H instruction
            /// </summary>
            byte SRA_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA L instruction
            /// </summary>
            byte SRA_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRA (HL) instruction
            /// </summary>
            byte SRA_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The SRA (IX+n),A instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n),B instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n),C instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n),D instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n),E instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n),H instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n),L instruction
            /// </summary>
            byte SRA_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IX+n) instruction
            /// </summary>
            byte SRA_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),A instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),B instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),C instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),D instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),E instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),H instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n),L instruction
            /// </summary>
            byte SRA_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRA (IY+n) instruction
            /// </summary>
            byte SRA_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue >> 1) | (oldValue & 0x80));
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL A instruction
            /// </summary>
            byte SLL_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL B instruction
            /// </summary>
            byte SLL_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL C instruction
            /// </summary>
            byte SLL_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL D instruction
            /// </summary>
            byte SLL_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL E instruction
            /// </summary>
            byte SLL_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL H instruction
            /// </summary>
            byte SLL_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL L instruction
            /// </summary>
            byte SLL_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)((oldValue << 1) | 1);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SLL (HL) instruction
            /// </summary>
            byte SLL_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The SLL (IX+n),A instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n),B instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n),C instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n),D instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n),E instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n),H instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n),L instruction
            /// </summary>
            byte SLL_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IX+n) instruction
            /// </summary>
            byte SLL_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),A instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),B instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),C instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),D instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),E instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),H instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n),L instruction
            /// </summary>
            byte SLL_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SLL (IY+n) instruction
            /// </summary>
            byte SLL_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)((oldValue << 1) | 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 7);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL A instruction
            /// </summary>
            byte SRL_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)(oldValue >> 1);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL B instruction
            /// </summary>
            byte SRL_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)(oldValue >> 1);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL C instruction
            /// </summary>
            byte SRL_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)(oldValue >> 1);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL D instruction
            /// </summary>
            byte SRL_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)(oldValue >> 1);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL E instruction
            /// </summary>
            byte SRL_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)(oldValue >> 1);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL H instruction
            /// </summary>
            byte SRL_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)(oldValue >> 1);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL L instruction
            /// </summary>
            byte SRL_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)(oldValue >> 1);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 8;
            }

            /// <summary>
            /// The SRL (HL) instruction
            /// </summary>
            byte SRL_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 15;
            }

            /// <summary>
            /// The SRL (IX+n),A instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n),B instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n),C instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n),D instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n),E instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n),H instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n),L instruction
            /// </summary>
            byte SRL_aIX_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IX+n) instruction
            /// </summary>
            byte SRL_aIX_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),A instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_A(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.A = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),B instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_B(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.B = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),C instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_C(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.C = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),D instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_D(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.D = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),E instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_E(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.E = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),H instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_H(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.H = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n),L instruction
            /// </summary>
            byte SRL_aIY_plus_n_and_load_L(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);
                RG.L = newValue;

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }

            /// <summary>
            /// The SRL (IY+n) instruction
            /// </summary>
            byte SRL_aIY_plus_n(byte offset)
            {
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue >> 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.CF = GetBit(oldValue, 0);
                RG.HF = 0;
                RG.NF = 0;
                SetFlags3and5From(newValue);
                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.PF = Parity[newValue];

                return 23;
            }
        }
    }
}