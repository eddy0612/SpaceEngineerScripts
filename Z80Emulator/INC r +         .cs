// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "INC r +         .tt" instead.

using System;

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The INC A instruction.
            /// </summary>
            private byte INC_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)(oldValue + 1);
                RG.A = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC A instruction.
            /// </summary>
            private byte DEC_A()
            {
                FetchFinished();

                var oldValue = RG.A;
                var newValue = (byte)(oldValue - 1);
                RG.A = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC B instruction.
            /// </summary>
            private byte INC_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)(oldValue + 1);
                RG.B = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC B instruction.
            /// </summary>
            private byte DEC_B()
            {
                FetchFinished();

                var oldValue = RG.B;
                var newValue = (byte)(oldValue - 1);
                RG.B = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC C instruction.
            /// </summary>
            private byte INC_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)(oldValue + 1);
                RG.C = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC C instruction.
            /// </summary>
            private byte DEC_C()
            {
                FetchFinished();

                var oldValue = RG.C;
                var newValue = (byte)(oldValue - 1);
                RG.C = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC D instruction.
            /// </summary>
            private byte INC_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)(oldValue + 1);
                RG.D = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC D instruction.
            /// </summary>
            private byte DEC_D()
            {
                FetchFinished();

                var oldValue = RG.D;
                var newValue = (byte)(oldValue - 1);
                RG.D = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC E instruction.
            /// </summary>
            private byte INC_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)(oldValue + 1);
                RG.E = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC E instruction.
            /// </summary>
            private byte DEC_E()
            {
                FetchFinished();

                var oldValue = RG.E;
                var newValue = (byte)(oldValue - 1);
                RG.E = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC H instruction.
            /// </summary>
            private byte INC_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)(oldValue + 1);
                RG.H = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC H instruction.
            /// </summary>
            private byte DEC_H()
            {
                FetchFinished();

                var oldValue = RG.H;
                var newValue = (byte)(oldValue - 1);
                RG.H = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC L instruction.
            /// </summary>
            private byte INC_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)(oldValue + 1);
                RG.L = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The DEC L instruction.
            /// </summary>
            private byte DEC_L()
            {
                FetchFinished();

                var oldValue = RG.L;
                var newValue = (byte)(oldValue - 1);
                RG.L = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 4;
            }

            /// <summary>
            /// The INC IXH instruction.
            /// </summary>
            private byte INC_IXH()
            {
                FetchFinished();

                var oldValue = RG.IXH;
                var newValue = (byte)(oldValue + 1);
                RG.IXH = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The DEC IXH instruction.
            /// </summary>
            private byte DEC_IXH()
            {
                FetchFinished();

                var oldValue = RG.IXH;
                var newValue = (byte)(oldValue - 1);
                RG.IXH = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The INC IXL instruction.
            /// </summary>
            private byte INC_IXL()
            {
                FetchFinished();

                var oldValue = RG.IXL;
                var newValue = (byte)(oldValue + 1);
                RG.IXL = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The DEC IXL instruction.
            /// </summary>
            private byte DEC_IXL()
            {
                FetchFinished();

                var oldValue = RG.IXL;
                var newValue = (byte)(oldValue - 1);
                RG.IXL = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The INC IYH instruction.
            /// </summary>
            private byte INC_IYH()
            {
                FetchFinished();

                var oldValue = RG.IYH;
                var newValue = (byte)(oldValue + 1);
                RG.IYH = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The DEC IYH instruction.
            /// </summary>
            private byte DEC_IYH()
            {
                FetchFinished();

                var oldValue = RG.IYH;
                var newValue = (byte)(oldValue - 1);
                RG.IYH = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The INC IYL instruction.
            /// </summary>
            private byte INC_IYL()
            {
                FetchFinished();

                var oldValue = RG.IYL;
                var newValue = (byte)(oldValue + 1);
                RG.IYL = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The DEC IYL instruction.
            /// </summary>
            private byte DEC_IYL()
            {
                FetchFinished();

                var oldValue = RG.IYL;
                var newValue = (byte)(oldValue - 1);
                RG.IYL = newValue;

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 8;
            }

            /// <summary>
            /// The INC (HL) instruction.
            /// </summary>
            private byte INC_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue + 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 11;
            }

            /// <summary>
            /// The DEC (HL) instruction.
            /// </summary>
            private byte DEC_aHL()
            {
                FetchFinished();

                var address = (ushort)RG.HL;
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue - 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 11;
            }

            /// <summary>
            /// The INC (IX+n) instruction.
            /// </summary>
            private byte INC_aIX_plus_n()
            {
                var offset = ProcessorAgent.FetchNextOpcode();
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue + 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 23;
            }

            /// <summary>
            /// The DEC (IX+n) instruction.
            /// </summary>
            private byte DEC_aIX_plus_n()
            {
                var offset = ProcessorAgent.FetchNextOpcode();
                FetchFinished();

                var address = (ushort)(RG.IX + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue - 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 23;
            }

            /// <summary>
            /// The INC (IY+n) instruction.
            /// </summary>
            private byte INC_aIY_plus_n()
            {
                var offset = ProcessorAgent.FetchNextOpcode();
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue + 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x00);
                RG.PF = (newValue == 0x80);
                RG.NF = 0;
                SetFlags3and5From(newValue);

                return 23;
            }

            /// <summary>
            /// The DEC (IY+n) instruction.
            /// </summary>
            private byte DEC_aIY_plus_n()
            {
                var offset = ProcessorAgent.FetchNextOpcode();
                FetchFinished();

                var address = (ushort)(RG.IY + (SByte)offset);
                var oldValue = ProcessorAgent.ReadFromMemory(address);
                var newValue = (byte)(oldValue - 1);
                ProcessorAgent.WriteToMemory(address, newValue);

                RG.SF = GetBit(newValue, 7);
                RG.ZF = (newValue == 0);
                RG.HF = ((newValue & 0x0F) == 0x0F);
                RG.PF = (newValue == 0x7F);
                RG.NF = 1;
                SetFlags3and5From(newValue);

                return 23;
            }
        }
    }
}