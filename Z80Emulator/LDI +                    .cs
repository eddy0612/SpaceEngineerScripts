// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "LDI +                    .tt" instead.

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The LDI instruction.
            /// </summary>
            byte LDI()
            {
                FetchFinished();

                var sourceAddress = RG.HL;
                var destAddress = RG.DE;
                var counter = RG.BC;
                var value = ProcessorAgent.ReadFromMemory((ushort)sourceAddress);
                ProcessorAgent.WriteToMemory((ushort)destAddress, value);

                RG.HL = (short)(sourceAddress + 1);
                RG.DE = (short)(destAddress + 1);
                counter--;
                RG.BC = counter;

                RG.HF = 0;
                RG.NF = 0;
                RG.PF = (counter != 0);

                var valuePlusA = (byte)(value + RG.A);
                RG.Flag3 = GetBit(valuePlusA, 3);
                RG.Flag5 = GetBit(valuePlusA, 1);


                return 16;
            }

            /// <summary>
            /// The LDD instruction.
            /// </summary>
            byte LDD()
            {
                FetchFinished();

                var sourceAddress = RG.HL;
                var destAddress = RG.DE;
                var counter = RG.BC;
                var value = ProcessorAgent.ReadFromMemory((ushort)sourceAddress);
                ProcessorAgent.WriteToMemory((ushort)destAddress, value);

                RG.HL = (short)(sourceAddress - 1);
                RG.DE = (short)(destAddress - 1);
                counter--;
                RG.BC = counter;

                RG.HF = 0;
                RG.NF = 0;
                RG.PF = (counter != 0);

                var valuePlusA = (byte)(value + RG.A);
                RG.Flag3 = GetBit(valuePlusA, 3);
                RG.Flag5 = GetBit(valuePlusA, 1);


                return 16;
            }

            /// <summary>
            /// The LDIR instruction.
            /// </summary>
            byte LDIR()
            {
                FetchFinished();

                var sourceAddress = RG.HL;
                var destAddress = RG.DE;
                var counter = RG.BC;
                var value = ProcessorAgent.ReadFromMemory((ushort)sourceAddress);
                ProcessorAgent.WriteToMemory((ushort)destAddress, value);

                RG.HL = (short)(sourceAddress + 1);
                RG.DE = (short)(destAddress + 1);
                counter--;
                RG.BC = counter;

                RG.HF = 0;
                RG.NF = 0;
                RG.PF = (counter != 0);

                var valuePlusA = (byte)(value + RG.A);
                RG.Flag3 = GetBit(valuePlusA, 3);
                RG.Flag5 = GetBit(valuePlusA, 1);

                if (counter != 0)
                {
                    RG.PC = (ushort)(RG.PC - 2);
                    return 21;
                }

                return 16;
            }

            /// <summary>
            /// The LDDR instruction.
            /// </summary>
            byte LDDR()
            {
                FetchFinished();

                var sourceAddress = RG.HL;
                var destAddress = RG.DE;
                var counter = RG.BC;
                var value = ProcessorAgent.ReadFromMemory((ushort)sourceAddress);
                ProcessorAgent.WriteToMemory((ushort)destAddress, value);

                RG.HL = (short)(sourceAddress - 1);
                RG.DE = (short)(destAddress - 1);
                counter--;
                RG.BC = counter;

                RG.HF = 0;
                RG.NF = 0;
                RG.PF = (counter != 0);

                var valuePlusA = (byte)(value + RG.A);
                RG.Flag3 = GetBit(valuePlusA, 3);
                RG.Flag5 = GetBit(valuePlusA, 1);

                if (counter != 0)
                {
                    RG.PC = (ushort)(RG.PC - 2);
                    return 21;
                }

                return 16;
            }
        }
    }
}