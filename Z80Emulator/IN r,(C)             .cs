// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "IN r,(C)             .tt" instead.

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The IN A,(C) instruction.
            /// </summary>
            byte IN_A_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.A = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN B,(C) instruction.
            /// </summary>
            byte IN_B_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.B = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN C,(C) instruction.
            /// </summary>
            byte IN_C_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.C = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN D,(C) instruction.
            /// </summary>
            byte IN_D_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.D = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN E,(C) instruction.
            /// </summary>
            byte IN_E_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.E = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN H,(C) instruction.
            /// </summary>
            byte IN_H_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.H = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN L,(C) instruction.
            /// </summary>
            byte IN_L_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);
                RG.L = value;

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }

            /// <summary>
            /// The IN F,(C) instruction.
            /// </summary>
            byte IN_F_C()
            {
                FetchFinished();

                var value = ProcessorAgent.ReadFromPort((ushort)RG.BC);

                RG.SF = GetBit(value, 7);
                RG.ZF = (value == 0);
                RG.NF = 0;
                RG.HF = 0;
                RG.PF = Parity[value];
                SetFlags3and5From(value);

                return 12;
            }
        }
    }
}