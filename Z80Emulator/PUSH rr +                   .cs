// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "PUSH rr +                   .tt" instead.


namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The PUSH AF instruction.
            /// </summary>
            private byte PUSH_AF()
            {
                FetchFinished();

                var valueToPush = RG.AF;
                var sp = (ushort)(RG.SP - 1);
                ProcessorAgent.WriteToMemory(sp, GetHighByte(valueToPush));
                sp--;
                ProcessorAgent.WriteToMemory(sp, GetLowByte(valueToPush));
                RG.SP = (short)sp;

                return 11;
            }

            /// <summary>
            /// The POP AF instruction.
            /// </summary>
            private byte POP_AF()
            {
                FetchFinished();

                var sp = (ushort)RG.SP;
                var newAF = CreateShort(
                    ProcessorAgent.ReadFromMemory(sp),
                    ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
                RG.AF = newAF;

                RG.SP += 2;

                return 10;
            }

            /// <summary>
            /// The PUSH BC instruction.
            /// </summary>
            private byte PUSH_BC()
            {
                FetchFinished();

                var valueToPush = RG.BC;
                var sp = (ushort)(RG.SP - 1);
                ProcessorAgent.WriteToMemory(sp, GetHighByte(valueToPush));
                sp--;
                ProcessorAgent.WriteToMemory(sp, GetLowByte(valueToPush));
                RG.SP = (short)sp;

                return 11;
            }

            /// <summary>
            /// The POP BC instruction.
            /// </summary>
            private byte POP_BC()
            {
                FetchFinished();

                var sp = (ushort)RG.SP;
                var newBC = CreateShort(
                    ProcessorAgent.ReadFromMemory(sp),
                    ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
                RG.BC = newBC;

                RG.SP += 2;

                return 10;
            }

            /// <summary>
            /// The PUSH DE instruction.
            /// </summary>
            private byte PUSH_DE()
            {
                FetchFinished();

                var valueToPush = RG.DE;
                var sp = (ushort)(RG.SP - 1);
                ProcessorAgent.WriteToMemory(sp, GetHighByte(valueToPush));
                sp--;
                ProcessorAgent.WriteToMemory(sp, GetLowByte(valueToPush));
                RG.SP = (short)sp;

                return 11;
            }

            /// <summary>
            /// The POP DE instruction.
            /// </summary>
            private byte POP_DE()
            {
                FetchFinished();

                var sp = (ushort)RG.SP;
                var newDE = CreateShort(
                    ProcessorAgent.ReadFromMemory(sp),
                    ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
                RG.DE = newDE;

                RG.SP += 2;

                return 10;
            }

            /// <summary>
            /// The PUSH HL instruction.
            /// </summary>
            private byte PUSH_HL()
            {
                FetchFinished();

                var valueToPush = RG.HL;
                var sp = (ushort)(RG.SP - 1);
                ProcessorAgent.WriteToMemory(sp, GetHighByte(valueToPush));
                sp--;
                ProcessorAgent.WriteToMemory(sp, GetLowByte(valueToPush));
                RG.SP = (short)sp;

                return 11;
            }

            /// <summary>
            /// The POP HL instruction.
            /// </summary>
            private byte POP_HL()
            {
                FetchFinished();

                var sp = (ushort)RG.SP;
                var newHL = CreateShort(
                    ProcessorAgent.ReadFromMemory(sp),
                    ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
                RG.HL = newHL;

                RG.SP += 2;

                return 10;
            }

            /// <summary>
            /// The PUSH IX instruction.
            /// </summary>
            private byte PUSH_IX()
            {
                FetchFinished();

                var valueToPush = RG.IX;
                var sp = (ushort)(RG.SP - 1);
                ProcessorAgent.WriteToMemory(sp, GetHighByte(valueToPush));
                sp--;
                ProcessorAgent.WriteToMemory(sp, GetLowByte(valueToPush));
                RG.SP = (short)sp;

                return 15;
            }

            /// <summary>
            /// The POP IX instruction.
            /// </summary>
            private byte POP_IX()
            {
                FetchFinished();

                var sp = (ushort)RG.SP;
                var newIX = CreateShort(
                    ProcessorAgent.ReadFromMemory(sp),
                    ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
                RG.IX = newIX;

                RG.SP += 2;

                return 14;
            }

            /// <summary>
            /// The PUSH IY instruction.
            /// </summary>
            private byte PUSH_IY()
            {
                FetchFinished();

                var valueToPush = RG.IY;
                var sp = (ushort)(RG.SP - 1);
                ProcessorAgent.WriteToMemory(sp, GetHighByte(valueToPush));
                sp--;
                ProcessorAgent.WriteToMemory(sp, GetLowByte(valueToPush));
                RG.SP = (short)sp;

                return 15;
            }

            /// <summary>
            /// The POP IY instruction.
            /// </summary>
            private byte POP_IY()
            {
                FetchFinished();

                var sp = (ushort)RG.SP;
                var newIY = CreateShort(
                    ProcessorAgent.ReadFromMemory(sp),
                    ProcessorAgent.ReadFromMemory((ushort)(sp + 1)));
                RG.IY = newIY;

                RG.SP += 2;

                return 14;
            }
        }
    }
}