// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "ADC HL,rr +          .tt" instead.

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The ADC HL,BC instruction
            /// </summary>
            byte ADC_HL_BC()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.BC;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd + RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The SBC HL,BC instruction
            /// </summary>
            byte SBC_HL_BC()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.BC;
                var newValueInt = (ushort)oldValue - (ushort)valueToAdd - RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

                RG.NF = 1;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADC HL,DE instruction
            /// </summary>
            byte ADC_HL_DE()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.DE;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd + RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The SBC HL,DE instruction
            /// </summary>
            byte SBC_HL_DE()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.DE;
                var newValueInt = (ushort)oldValue - (ushort)valueToAdd - RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

                RG.NF = 1;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADC HL,HL instruction
            /// </summary>
            byte ADC_HL_HL()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.HL;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd + RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The SBC HL,HL instruction
            /// </summary>
            byte SBC_HL_HL()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.HL;
                var newValueInt = (ushort)oldValue - (ushort)valueToAdd - RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

                RG.NF = 1;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADC HL,SP instruction
            /// </summary>
            byte ADC_HL_SP()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.SP;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd + RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd ^ 0x8000) & (valueToAdd ^ newValue) & 0x8000;

                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The SBC HL,SP instruction
            /// </summary>
            byte SBC_HL_SP()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.SP;
                var newValueInt = (ushort)oldValue - (ushort)valueToAdd - RG.CF;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.SF = newValue & 0x8000;
                RG.ZF = (newValue == 0);
                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.PF = (oldValue ^ valueToAdd) & (oldValue ^ newValue) & 0x8000;

                RG.NF = 1;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }
        }
    }
}