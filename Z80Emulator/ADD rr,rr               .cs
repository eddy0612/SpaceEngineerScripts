// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "ADD rr,rr               .tt" instead.

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The ADD HL,BC instruction
            /// </summary>
            byte ADD_HL_BC()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.BC;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 11;
            }

            /// <summary>
            /// The ADD HL,DE instruction
            /// </summary>
            byte ADD_HL_DE()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.DE;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 11;
            }

            /// <summary>
            /// The ADD HL,HL instruction
            /// </summary>
            byte ADD_HL_HL()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.HL;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 11;
            }

            /// <summary>
            /// The ADD HL,SP instruction
            /// </summary>
            byte ADD_HL_SP()
            {
                FetchFinished();

                var oldValue = RG.HL;
                var valueToAdd = RG.SP;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.HL = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 11;
            }

            /// <summary>
            /// The ADD IX,BC instruction
            /// </summary>
            byte ADD_IX_BC()
            {
                FetchFinished();

                var oldValue = RG.IX;
                var valueToAdd = RG.BC;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IX = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IX,DE instruction
            /// </summary>
            byte ADD_IX_DE()
            {
                FetchFinished();

                var oldValue = RG.IX;
                var valueToAdd = RG.DE;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IX = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IX,IX instruction
            /// </summary>
            byte ADD_IX_IX()
            {
                FetchFinished();

                var oldValue = RG.IX;
                var valueToAdd = RG.IX;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IX = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IX,SP instruction
            /// </summary>
            byte ADD_IX_SP()
            {
                FetchFinished();

                var oldValue = RG.IX;
                var valueToAdd = RG.SP;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IX = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IY,BC instruction
            /// </summary>
            byte ADD_IY_BC()
            {
                FetchFinished();

                var oldValue = RG.IY;
                var valueToAdd = RG.BC;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IY = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IY,DE instruction
            /// </summary>
            byte ADD_IY_DE()
            {
                FetchFinished();

                var oldValue = RG.IY;
                var valueToAdd = RG.DE;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IY = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IY,IY instruction
            /// </summary>
            byte ADD_IY_IY()
            {
                FetchFinished();

                var oldValue = RG.IY;
                var valueToAdd = RG.IY;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IY = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }

            /// <summary>
            /// The ADD IY,SP instruction
            /// </summary>
            byte ADD_IY_SP()
            {
                FetchFinished();

                var oldValue = RG.IY;
                var valueToAdd = RG.SP;
                var newValueInt = (ushort)oldValue + (ushort)valueToAdd;
                var newValue = (short)(newValueInt & 0xFFFF);
                RG.IY = newValue;

                RG.HF = (oldValue ^ newValue ^ valueToAdd) & 0x1000;
                RG.CF = (newValueInt & 0x10000);
                RG.NF = 0;
                SetFlags3and5From(GetHighByte(newValue));

                return 15;
            }
        }
    }
}