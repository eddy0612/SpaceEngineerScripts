// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "INI +             .tt" instead.

namespace IngameScript
{
    partial class Program
    {
        public partial class Z80InstructionExecutor
        {
            /// <summary>
            /// The INI instruction.
            /// </summary>
            byte INI()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromPort(portNumber);
                ProcessorAgent.WriteToMemory((ushort)address, value);

                RG.HL++;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);


                return 16;
            }

            /// <summary>
            /// The IND instruction.
            /// </summary>
            byte IND()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromPort(portNumber);
                ProcessorAgent.WriteToMemory((ushort)address, value);

                RG.HL--;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);


                return 16;
            }

            /// <summary>
            /// The INIR instruction.
            /// </summary>
            byte INIR()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromPort(portNumber);
                ProcessorAgent.WriteToMemory((ushort)address, value);

                RG.HL++;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);

                if (counter != 0)
                {
                    RG.PC = (ushort)(RG.PC - 2);
                    return 21;
                }

                return 16;
            }

            /// <summary>
            /// The INDR instruction.
            /// </summary>
            byte INDR()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromPort(portNumber);
                ProcessorAgent.WriteToMemory((ushort)address, value);

                RG.HL--;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);

                if (counter != 0)
                {
                    RG.PC = (ushort)(RG.PC - 2);
                    return 21;
                }

                return 16;
            }

            /// <summary>
            /// The OUTI instruction.
            /// </summary>
            byte OUTI()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromMemory((ushort)address);
                ProcessorAgent.WriteToPort(portNumber, value);

                RG.HL++;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);


                return 16;
            }

            /// <summary>
            /// The OUTD instruction.
            /// </summary>
            byte OUTD()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromMemory((ushort)address);
                ProcessorAgent.WriteToPort(portNumber, value);

                RG.HL--;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);


                return 16;
            }

            /// <summary>
            /// The OTIR instruction.
            /// </summary>
            byte OTIR()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromMemory((ushort)address);
                ProcessorAgent.WriteToPort(portNumber, value);

                RG.HL++;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);

                if (counter != 0)
                {
                    RG.PC = (ushort)(RG.PC - 2);
                    return 21;
                }

                return 16;
            }

            /// <summary>
            /// The OTDR instruction.
            /// </summary>
            byte OTDR()
            {
                FetchFinished();

                var portNumber = RG.C;
                var address = RG.HL;
                var value = ProcessorAgent.ReadFromMemory((ushort)address);
                ProcessorAgent.WriteToPort(portNumber, value);

                RG.HL--;
                var counter = RG.B;
                counter = (byte)(counter - 1);
                RG.B = counter;
                RG.ZF = (counter == 0);
                RG.NF = 1;
                RG.SF = GetBit(counter, 7);
                SetFlags3and5From(counter);

                if (counter != 0)
                {
                    RG.PC = (ushort)(RG.PC - 2);
                    return 21;
                }

                return 16;
            }
        }
    }
}